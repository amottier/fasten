/*
 * This file is generated by jOOQ.
 */
package eu.fasten.core.data.metadatadb.codegen.tables;


import eu.fasten.core.data.metadatadb.codegen.Indexes;
import eu.fasten.core.data.metadatadb.codegen.Keys;
import eu.fasten.core.data.metadatadb.codegen.Public;
import eu.fasten.core.data.metadatadb.codegen.tables.records.ArtifactStatesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ArtifactStates extends TableImpl<ArtifactStatesRecord> {

    private static final long serialVersionUID = -777099024;

    /**
     * The reference instance of <code>public.artifact_states</code>
     */
    public static final ArtifactStates ARTIFACT_STATES = new ArtifactStates();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArtifactStatesRecord> getRecordType() {
        return ArtifactStatesRecord.class;
    }

    /**
     * The column <code>public.artifact_states.id</code>.
     */
    public final TableField<ArtifactStatesRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('artifact_states_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.artifact_states.package_name</code>.
     */
    public final TableField<ArtifactStatesRecord, String> PACKAGE_NAME = createField(DSL.name("package_name"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.artifact_states.version</code>.
     */
    public final TableField<ArtifactStatesRecord, String> VERSION = createField(DSL.name("version"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.artifact_states.is_ingested</code>.
     */
    public final TableField<ArtifactStatesRecord, Boolean> IS_INGESTED = createField(DSL.name("is_ingested"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * Create a <code>public.artifact_states</code> table reference
     */
    public ArtifactStates() {
        this(DSL.name("artifact_states"), null);
    }

    /**
     * Create an aliased <code>public.artifact_states</code> table reference
     */
    public ArtifactStates(String alias) {
        this(DSL.name(alias), ARTIFACT_STATES);
    }

    /**
     * Create an aliased <code>public.artifact_states</code> table reference
     */
    public ArtifactStates(Name alias) {
        this(alias, ARTIFACT_STATES);
    }

    private ArtifactStates(Name alias, Table<ArtifactStatesRecord> aliased) {
        this(alias, aliased, null);
    }

    private ArtifactStates(Name alias, Table<ArtifactStatesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ArtifactStates(Table<O> child, ForeignKey<O, ArtifactStatesRecord> key) {
        super(child, key, ARTIFACT_STATES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ARTIFACT_STATES_PKEY, Indexes.UNIQUE_ARTIFACTS);
    }

    @Override
    public Identity<ArtifactStatesRecord, Long> getIdentity() {
        return Keys.IDENTITY_ARTIFACT_STATES;
    }

    @Override
    public UniqueKey<ArtifactStatesRecord> getPrimaryKey() {
        return Keys.ARTIFACT_STATES_PKEY;
    }

    @Override
    public List<UniqueKey<ArtifactStatesRecord>> getKeys() {
        return Arrays.<UniqueKey<ArtifactStatesRecord>>asList(Keys.ARTIFACT_STATES_PKEY, Keys.UNIQUE_ARTIFACTS);
    }

    @Override
    public ArtifactStates as(String alias) {
        return new ArtifactStates(DSL.name(alias), this);
    }

    @Override
    public ArtifactStates as(Name alias) {
        return new ArtifactStates(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ArtifactStates rename(String name) {
        return new ArtifactStates(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ArtifactStates rename(Name name) {
        return new ArtifactStates(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, Boolean> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
