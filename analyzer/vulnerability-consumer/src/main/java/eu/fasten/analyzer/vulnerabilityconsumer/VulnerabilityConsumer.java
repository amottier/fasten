/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.analyzer.vulnerabilityconsumer;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import eu.fasten.analyzer.vulnerabilityconsumer.db.MetadataUtility;
import eu.fasten.analyzer.vulnerabilityconsumer.utils.PURLPackage;
import eu.fasten.analyzer.vulnerabilityconsumer.utils.Vulnerability;
import eu.fasten.core.plugins.DBConnector;
import eu.fasten.core.plugins.KafkaPlugin;
import org.jooq.DSLContext;
import org.pf4j.Extension;
import org.pf4j.Plugin;
import org.pf4j.PluginWrapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;

public class VulnerabilityConsumer extends Plugin {

    public VulnerabilityConsumer(PluginWrapper wrapper) {
        super(wrapper);
    }

    @Extension
    public static class VulnerabilityConsumerExtension implements KafkaPlugin, DBConnector {
        // The output are enriched statements (containing fasten URIs for vulnerable callable IDs)
        private String consumerTopic = "fasten.vulnerability.consumer.out";
        private MetadataUtility metadataUtility;
        private Map<String, DSLContext> contexts;
        private Throwable pluginError = null;
        private ObjectMapper objectMapper = new ObjectMapper();
        private final Logger logger = LoggerFactory.getLogger(VulnerabilityConsumerExtension.class.getName());


        @Override
        public void setDBConnection(Map<String, DSLContext> dslContexts) {
            this.contexts = dslContexts;
        }

        @Override
        public Optional<List<String>> consumeTopic() {
            return Optional.of(Collections.singletonList(consumerTopic));
        }

        @Override
        public void setTopic(String topicName) {
            this.consumerTopic = topicName;
        }

        @Override
        public void consume(String record) {
            // Step 1: Parse the record to a Vulnerability Object
            try {
                var v = objectMapper.readValue(record, Vulnerability.class);
                logger.info("Read vulnerability " + v.getId() + " from Kafka");
                // Step 2: Store the vulnerability object in the DB using the MetadataUtility
                injectVulnerabilityIntoDB(v);
            } catch (JsonProcessingException e) {
                logger.error("Could not parse record JSON");
            }
        }

        /**
         * Used to inject Mock object in testing
         * @param metadataUtility
         */
        public void setMetadataUtility(MetadataUtility metadataUtility) {
            this.metadataUtility = metadataUtility;
        }

        @Override
        public Optional<String> produce() {
            // TODO: It will produce enriched/clean vulnerability statements
            // Should it?
            return Optional.empty();
        }

        @Override
        public String getOutputPath() {
            return null;
        }

        @Override
        public String name() {
            return "Vulnerability Consumer";
        }

        @Override
        public String description() {
            return "Reads vulnerabilities from Kafka and injects them in the DB.";
        }

        @Override
        public String version() {
            return "0.0.1";
        }

        @Override
        public void start() {

        }

        @Override
        public void stop() {

        }

        @Override
        public Throwable getPluginError() {
            return null;
        }

        @Override
        public void freeResource() {

        }

        /**
         * Method to inject the information contained in a Vulnerability Object.
         * The following explains the logic used to insert the information:
         * First, the information at the package level is injected. This is done by looping through
         * all the purls contained in the object. We store the IDs of the package_version row.
         *
         * Second, we try to find the callables responsible.
         * @param v
         */
        public void injectVulnerabilityIntoDB(Vulnerability v) {
            logger.info("Injecting vulnerability " + v.getId() + " into the Database");
            var context = v.getPurls().size() > 0 ? getVulnerabilityEcosystem(v) : null;
            if (context == null)    return;
            var pkgId = v.getPurls().size() > 0 ? metadataUtility.getPackageId(v.getPurls().iterator().next(), context) : -1L;

            if (pkgId < 0) return;

            var pkgVersionIds = new ArrayList<Long>();
            for (String purl : v.getPurls()) {
                var pkgVersionId = metadataUtility.getPackageVersionId(purl, context, pkgId);
                if (pkgVersionId > 0L) {
                    pkgVersionIds.add(pkgVersionId);
                }
            }

            if (pkgVersionIds.size() == 0) return;

            var fastenUris = new HashSet<String>();
            var latestVersionId = pkgVersionIds.get(pkgVersionIds.size() - 1);

            for (Vulnerability.Patch p : v.getPatches()) {
                logger.info("Searching for callables in " + p.getFileName());
                fastenUris.addAll(metadataUtility.getFastenUrisForPatch(p, latestVersionId, context));
            }

            logger.info("Collected " + fastenUris.size() + " vulnerable fasten_uris ids");
            v.setFastenUris(fastenUris);

            pkgVersionIds.forEach(id -> metadataUtility.injectPackageVersionVulnerability(v, id, context));

            for (String uri : fastenUris) {
                var callableIds = metadataUtility.getCallableIdsForFastenUri(uri, context);
                // Inject the metadata in the callable row
                for (Long id : callableIds) {
                    logger.info("Injecting into DB Callable with ID: " + id);
                    metadataUtility.injectCallableVulnerability(v, id, context);
                }
            }

            logger.info("Saving vulnerability " + v.getId() + " to file system");
            //saveVulnerabilityToFolder(pathToFolder, v);
        }

        /**
         * Finds the correct DSLContext for the vulnerability given.
         * @param v - vulnerability obj
         * @return DSLContext
         */
        public DSLContext getVulnerabilityEcosystem(Vulnerability v) {
            assert v.getPurls().size() > 0;
            var purl = v.getPurls().iterator().next();
            var purlObj = PURLPackage.getObjectFromPurl(purl);
            return contexts.get(purlObj.getType());
        }
    }
}
