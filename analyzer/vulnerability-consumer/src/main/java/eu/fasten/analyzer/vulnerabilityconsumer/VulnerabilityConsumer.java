/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.analyzer.vulnerabilityconsumer;

import com.google.gson.Gson;
import eu.fasten.analyzer.vulnerabilityconsumer.db.MetadataUtility;
import eu.fasten.analyzer.vulnerabilityconsumer.utils.Vulnerability;
import eu.fasten.core.data.Constants;
import eu.fasten.core.plugins.DBConnector;
import eu.fasten.core.plugins.KafkaPlugin;
import org.jooq.DSLContext;
import org.pf4j.Extension;
import org.pf4j.Plugin;
import org.pf4j.PluginWrapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Optional;

public class VulnerabilityConsumer extends Plugin {

    public VulnerabilityConsumer(PluginWrapper wrapper) {
        super(wrapper);
    }

    @Extension
    public static class VulnerabilityConsumerExtension implements KafkaPlugin, DBConnector {
        // The output are enriched statements (containing fasten URIs for vulnerable callable IDs)
        private String consumerTopic = "fasten.vulnerability.consumer.out";
        private MetadataUtility metadataUtility;
        private Gson gson = new Gson();
        private Throwable pluginError = null;
        private final Logger logger = LoggerFactory.getLogger(VulnerabilityConsumerExtension.class.getName());


        @Override
        public void setDBConnection(Map<String, DSLContext> dslContexts) {
            this.metadataUtility = new MetadataUtility(dslContexts);
        }

        @Override
        public Optional<List<String>> consumeTopic() {
            return Optional.of(Collections.singletonList(consumerTopic));
        }

        @Override
        public void setTopic(String topicName) {
            this.consumerTopic = topicName;
        }

        @Override
        public void consume(String record) {
            // Step 1: Parse the record to a Vulnerability Object
            Vulnerability v = gson.fromJson(record, Vulnerability.class);
            logger.info("Read vulnerability " + v.getId() + " from Kafka");
            // Step 2: Store the vulnerability object in the DB using the MetadataUtility\
            metadataUtility.injectVulnerabilityIntoDB(v);
        }

        @Override
        public Optional<String> produce() {
            return Optional.empty();
        }

        @Override
        public String getOutputPath() {
            return null;
        }

        @Override
        public String name() {
            return "Vulnerability Consumer";
        }

        @Override
        public String description() {
            return "Reads vulnerabilities from Kafka and injects them in the DB.";
        }

        @Override
        public String version() {
            return "0.0.1";
        }

        @Override
        public void start() {

        }

        @Override
        public void stop() {

        }

        @Override
        public Throwable getPluginError() {
            return null;
        }

        @Override
        public void freeResource() {

        }
    }
}
