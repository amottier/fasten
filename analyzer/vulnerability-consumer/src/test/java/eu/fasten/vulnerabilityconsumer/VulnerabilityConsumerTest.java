/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.vulnerabilityconsumer;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import eu.fasten.analyzer.vulnerabilityconsumer.VulnerabilityConsumer;
import eu.fasten.analyzer.vulnerabilityconsumer.db.MetadataUtility;
import eu.fasten.analyzer.vulnerabilityconsumer.utils.Severity;
import eu.fasten.analyzer.vulnerabilityconsumer.utils.Vulnerability;
import eu.fasten.core.data.Constants;
import org.jooq.DSLContext;
import org.json.JSONArray;
import org.json.JSONTokener;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;

import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.when;

public class VulnerabilityConsumerTest {
    private VulnerabilityConsumer.VulnerabilityConsumerExtension vulnerabilityConsumerExtension;
    private ObjectMapper objectmapper = new ObjectMapper();
    private DSLContext context;

    @BeforeEach
    public void setUp() {
        context = Mockito.mock(DSLContext.class);
        vulnerabilityConsumerExtension = new VulnerabilityConsumer.VulnerabilityConsumerExtension();
        vulnerabilityConsumerExtension.setTopic("fasten.vulnerability-consumer.out");
        vulnerabilityConsumerExtension.setDBConnection(new HashMap<>(Map.of(Constants.mvnForge, context)));
    }

    @Test
    public void injectIntoDBVulnerabilityStatement() throws JsonProcessingException {
        // VULNERABILITY OBJECT
        var vulnJson = "[\n" +
                "  {\n" +
                "    \"id\": \"CVE-2017-18640\",\n" +
                "    \"description\": \"If you see this is good\",\n" +
                "    \"severity\": \"HIGH\",\n" +
                "    \"scoreCVSS2\": 5,\n" +
                "    \"scoreCVSS3\": 7.5,\n" +
                "    \"published_date\": \"12/11/2019\",\n" +
                "    \"last_modified_date\": \"08/31/2020\",\n" +
                "    \"purls\": [\n" +
                "      \"pkg:maven/org.testing/mock@1.0.1\"\n" +
                "    ],\n" +
                "    \"references\": [\n" +
                "      \"https://bitbucket.org/asomov/snakeyaml/wiki/Billion%20laughs%20attack\"\n" +
                "    ],\n" +
                "    \"patch_links\": [\n" +
                "      \"https://bitbucket.org/asomov/snakeyaml/commits/da11ddbd91c1f8392ea932b37fa48110fa54ed8c\"\n" +
                "    ],\n" +
                "    \"exploits\": [\n" +
                "      \"https://bitbucket.org/asomov/snakeyaml/issues/377/allow-configuration-for-preventing-billion\"\n" +
                "    ],\n" +
                "    \"patches\": [\n" +
                "      {\n" +
                "        \"filename\": \"/src/main/java/net/GenericClass.java\",\n" +
                "        \"date\": \"04/04/2004\",\n" +
                "        \"line_numbers\": [\n" +
                "          33\n" +
                "        ]\n" +
                "      }\n" +
                "    ]\n" +
                "  }\n" +
                "]";

        final JSONArray vulnsJson = new JSONArray(new JSONTokener(vulnJson));

        var v = new Vulnerability();
        v.setId("CVE-TEST");
        v.setDescription("Mock Vulnerability");
        v.setSeverity(Severity.HIGH);
        v.setScoreCVSS2(7.5);
        v.setScoreCVSS3(5.0);
        v.setPublishedDate("12/11/2019");
        v.setLastModifiedDate("08/31/2020");
        v.setPurls(new HashSet<>(Arrays.asList("pkg:maven/org.testing/mock@1.0.1")));
        var patch = new Vulnerability.Patch();
        patch.setPatchDate("04/04/2004");
        patch.setLineNumbers(Arrays.asList(33));
        patch.setFileName("/src/main/java/net/GenericClass.java");
        v.setPatches(new HashSet<>(Arrays.asList(patch)));

        var metadataUtility = Mockito.mock(MetadataUtility.class);

        // MOCKITO WHEN
        when(metadataUtility.getPackageId("pkg:maven/org.testing/mock@1.0.1", context)).thenReturn(1L);
        when(metadataUtility.getPackageVersionId("pkg:maven/org.testing/mock@1.0.1", context, 1L)).thenReturn(1L);
        var fasten_uri = "/java/net/GenericClass.%3Cclinit%3E()%2Fjava.lang%2FVoidType";
        var fastenUris = new HashSet<>(Arrays.asList(fasten_uri));
        when(metadataUtility.getFastenUrisForPatch(patch, 1L, context)).thenReturn(fastenUris);
        doNothing().when(metadataUtility).injectPackageVersionVulnerability(Mockito.any(Vulnerability.class), Mockito.anyLong(), Mockito.any(DSLContext.class));
        when(metadataUtility.getCallableIdsForFastenUri(fasten_uri, context)).thenReturn(Arrays.asList(42L));
        doNothing().when(metadataUtility).injectCallableVulnerability(Mockito.any(Vulnerability.class), Mockito.anyLong(), Mockito.any(DSLContext.class));

        // CALL
        vulnerabilityConsumerExtension.setMetadataUtility(metadataUtility);
        vulnerabilityConsumerExtension.consume(vulnsJson.get(0).toString());

        // MOCKITO VERIFY
        Mockito.verify(metadataUtility).getPackageId("pkg:maven/org.testing/mock@1.0.1", context);
        Mockito.verify(metadataUtility).getPackageVersionId("pkg:maven/org.testing/mock@1.0.1", context, 1L);
        Mockito.verify(metadataUtility).getFastenUrisForPatch(patch, 1L, context);
        Mockito.verify(metadataUtility).getCallableIdsForFastenUri(fasten_uri, context);
        // VERIFY injection
    }
}
